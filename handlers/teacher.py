from aiogram.enums.parse_mode import ParseMode
from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery
from aiogram.types import (InlineKeyboardMarkup, InlineKeyboardButton)
import handlers.keyboards as kb
from config import ADMIN_ID
from config import bot
import json
from datetime import datetime
from .states import WorkTest, AdminCall, StudentContact
from handlers.create_data_base import (cur_tests, cur_users, cur_results,
                                       conn_tests, conn_users, cur_messages, conn_messages)

teach = Router()


@teach.message(F.text == '–°–≤—è–∑—å —Å–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ ‚òéÔ∏è')
async def student_contact(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
    cur_users.execute("SELECT user_id, user_full_name FROM users WHERE user_type = 'student'")
    students = cur_users.fetchall()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{full_name}", callback_data=f"send_to_student_{user_id}")]
        for user_id, full_name in students
    ])

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=keyboard)
    await state.set_state(StudentContact.waiting_for_student)


@teach.callback_query(lambda c: c.data.startswith("send_to_student_"))
async def send_to_student(callback_query: CallbackQuery, state: FSMContext):
    student_id = int(callback_query.data.split("_")[-1])
    await state.update_data(student_id=student_id)
    await state.set_state(StudentContact.waiting_for_message)
    await callback_query.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—É")
    await callback_query.answer()


@teach.callback_query(F.data.startswith('answer'))
async def answer_to_student(callback: CallbackQuery, state: FSMContext):
    if callback.data.startswith('answer'):
        await state.update_data(waiting_for_message=callback.data)
        await state.set_state(StudentContact.waiting_for_response)
        await callback.message.answer('–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—É')
        await callback.answer('')
    else:
        await callback.answer('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–û—Ç–≤–µ—Ç–∏—Ç—å"')


@teach.message(StudentContact.waiting_for_response)
async def send_message_to_student(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü—É messages
    data = await state.get_data()
    student_id = data.get('student_id')
    if student_id:
        cur_messages.execute("INSERT INTO messages (user_id, user_type, message) VALUES (?, ?, ?)",
                             (message.from_user.id, 'teacher', message.text))
        conn_messages.commit()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç—É
        await send_message_to_student(message, student_id, '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å')
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    else:
        await message.answer('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ ID —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')

    await state.clear()


async def send_message_to_student(message: Message, user_id: int, user_type: str):
    await bot.send_message(user_id, f'*–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_type},'
                                    f' {message.from_user.full_name}\n\n*'
                                    f' {message.text}',
                           reply_markup=kb.st_answer,
                           parse_mode=ParseMode.MARKDOWN)


@teach.callback_query(F.data == 'check_week_data')
async def data_check_week_data(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.answer('<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:</b>\n'
                                  '1) –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ - –ù–∏–∫–æ–ª–∞–π –ò.–ù. 301 –∫–∞–± \n'
                                  '2) –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ - –ò–≤–∞–Ω–æ–≤–∞ –ê.–ú. 105 –∫–∞–±.\n'
                                  '3) –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ - –õ–µ–±–µ–¥–µ–≤ –ù.–û. 224 –∫–∞–±.\n'
                                  '4) –§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞ - –ï–ª–∏—Å–µ–µ–≤ –ê.–ü. 111 –∫–∞–±.',
                                  parse_mode=ParseMode.HTML)


@teach.message(F.text == '–†–∞—Å—Å—ã–ª–∫–∞ –≥—Ä—É–ø–ø–µ üì¢')
async def text_message_for_group_student(message: Message):
    await message.answer('<b>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –≥—Ä—É–ø–ø—É –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏</b>',
                         parse_mode=ParseMode.HTML, reply_markup=kb.groups_college)


@teach.message(F.text == '–°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç ‚ûï')
async def text_create_test(message: Message, state: FSMContext):
    await state.set_state(WorkTest.name_quest)
    await message.answer(f'–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞\n'
                         f'*–ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ 63 —Å–∏–º–≤–æ–ª–æ–≤!*',
                         reply_markup=kb.cancel,
                         parse_mode=ParseMode.MARKDOWN)


@teach.message(F.text == '–í—ã–π—Ç–∏ –∏–∑ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞ üôÖ')
async def cmd_cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(f'*–°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ –ø—Ä–µ–∫—Ä–∞—â–µ–Ω–æ*', parse_mode=ParseMode.MARKDOWN,
                         reply_markup=kb.teacher_panel())


@teach.message(WorkTest.name_quest)
async def test_name_quest(message: Message, state: FSMContext):
    name_quest = message.text.strip()
    if len(name_quest) > 63:
        await message.answer("–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 63 —Å–∏–º–≤–æ–ª–∞."
                             " –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
    else:
        await state.update_data(name_quest=name_quest)
        await state.set_state(WorkTest.quest1)
        await message.answer('–û—Ç–ª–∏—á–Ω–æ! —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å ‚Ññ1')


@teach.message(WorkTest.quest1)
async def test_quest1(message: Message, state: FSMContext):
    await state.update_data(question1=message.text)
    await state.set_state(WorkTest.q1_answer1)
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞')


@teach.message(WorkTest.q1_answer1)
async def test_q1_answer1(message: Message, state: FSMContext):
    await state.update_data(q1_answer1=message.text)
    await state.set_state(WorkTest.q1_answer2)
    await message.answer('–î–∞–ª–µ–µ –Ω–∞–ø–∏—à–∏—Ç–µ –≤—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞')


@teach.message(WorkTest.q1_answer2)
async def test_q1_answer2(message: Message, state: FSMContext):
    await state.update_data(q1_answer2=message.text)
    await state.set_state(WorkTest.q1_answer3)
    await message.answer('–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Ç—Ä–µ—Ç–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞')


@teach.message(WorkTest.q1_answer3)
async def test_q1_answer3(message: Message, state: FSMContext):
    await state.update_data(q1_answer3=message.text)
    await state.set_state(WorkTest.q1_answer4)
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ —á–µ—Ç–≤–µ—Ä—Ç—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞')


@teach.message(WorkTest.q1_answer4)
async def test_q1_answer4(message: Message, state: FSMContext):
    await state.update_data(q1_answer4=message.text)
    await state.set_state(WorkTest.quest2)
    await message.answer('–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å ‚Ññ2')


@teach.message(WorkTest.quest2)
async def test_quest2(message: Message, state: FSMContext):
    await state.update_data(question2=message.text)
    await state.set_state(WorkTest.q2_answer1)
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞')


@teach.message(WorkTest.q2_answer1)
async def test_q2_answer1(message: Message, state: FSMContext):
    await state.update_data(q2_answer1=message.text)
    await state.set_state(WorkTest.q2_answer2)
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –≤—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞')


@teach.message(WorkTest.q2_answer2)
async def test_q2_answer2(message: Message, state: FSMContext):
    await state.update_data(q2_answer2=message.text)
    await state.set_state(WorkTest.q2_answer3)
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ —Ç—Ä–µ—Ç–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞')


@teach.message(WorkTest.q2_answer3)
async def test_q2_answer3(message: Message, state: FSMContext):
    await state.update_data(q2_answer3=message.text)
    await state.set_state(WorkTest.q2_answer4)
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ —á–µ—Ç–≤–µ—Ä—Ç—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞')


@teach.message(WorkTest.q2_answer4)
async def test_q2_answer4(message: Message, state: FSMContext):
    await state.update_data(q2_answer4=message.text)
    await state.set_state(WorkTest.quest3)
    await message.answer('–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å ‚Ññ3')


@teach.message(WorkTest.quest3)
async def test_quest3(message: Message, state: FSMContext):
    await state.update_data(question3=message.text)
    await state.set_state(WorkTest.q3_answer1)
    await message.answer('–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞')


@teach.message(WorkTest.q3_answer1)
async def test_q3_answer1(message: Message, state: FSMContext):
    await state.update_data(q3_answer1=message.text)
    await state.set_state(WorkTest.q3_answer2)
    await message.answer('–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞')


@teach.message(WorkTest.q3_answer2)
async def test_q3_answer2(message: Message, state: FSMContext):
    await state.update_data(q3_answer2=message.text)
    await state.set_state(WorkTest.q3_answer3)
    await message.answer('–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —Ç—Ä–µ—Ç–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞')


@teach.message(WorkTest.q3_answer3)
async def test_q3_answer3(message: Message, state: FSMContext):
    await state.update_data(q3_answer3=message.text)
    await state.set_state(WorkTest.q3_answer4)
    await message.answer('–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ —á–µ—Ç–≤–µ—Ä—Ç—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞')


@teach.message(WorkTest.q3_answer4)
async def test_q3_answer4(message: Message, state: FSMContext):
    await state.update_data(q3_answer4=message.text)
    await state.set_state(WorkTest.quest4)
    await message.answer('–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å ‚Ññ4')


@teach.message(WorkTest.quest4)
async def test_quest4(message: Message, state: FSMContext):
    await state.update_data(question4=message.text)
    await state.set_state(WorkTest.q4_answer1)
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞')


@teach.message(WorkTest.q4_answer1)
async def test_q4_answer1(message: Message, state: FSMContext):
    await state.update_data(q4_answer1=message.text)
    await state.set_state(WorkTest.q4_answer2)
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –≤—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞')


@teach.message(WorkTest.q4_answer2)
async def test_q4_answer2(message: Message, state: FSMContext):
    await state.update_data(q4_answer2=message.text)
    await state.set_state(WorkTest.q4_answer3)
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ —Ç—Ä–µ—Ç–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞')


@teach.message(WorkTest.q4_answer3)
async def test_q4_answer3(message: Message, state: FSMContext):
    await state.update_data(q4_answer3=message.text)
    await state.set_state(WorkTest.q4_answer4)
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ —á–µ—Ç–≤–µ—Ä—Ç—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞')


@teach.message(WorkTest.q4_answer4)
async def test_q4_answer4(message: Message, state: FSMContext):
    await state.update_data(q4_answer4=message.text)
    await state.set_state(WorkTest.quest5)
    await message.answer('–û—Ç–ª–∏—á–Ω–æ, —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ –≤–æ–ø—Ä–æ—Å ‚Ññ5')


@teach.message(WorkTest.quest5)
async def test_quest5(message: Message, state: FSMContext):
    await state.update_data(question5=message.text)
    await state.set_state(WorkTest.q5_answer1)
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞')


@teach.message(WorkTest.q5_answer1)
async def test_q5_answer1(message: Message, state: FSMContext):
    await state.update_data(q5_answer1=message.text)
    await state.set_state(WorkTest.q5_answer2)
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –≤—Ç–æ—Ä–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞')


@teach.message(WorkTest.q5_answer2)
async def test_q5_answer2(message: Message, state: FSMContext):
    await state.update_data(q5_answer2=message.text)
    await state.set_state(WorkTest.q5_answer3)
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ —Ç—Ä–µ—Ç–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞')


@teach.message(WorkTest.q5_answer3)
async def test_q5_answer3(message: Message, state: FSMContext):
    await state.update_data(q5_answer3=message.text)
    await state.set_state(WorkTest.q5_answer4)
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ —á–µ—Ç–≤–µ—Ä—Ç—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –æ—Ç–≤–µ—Ç–∞')


@teach.message(WorkTest.q5_answer4)
async def test_q5_answer4(message: Message, state: FSMContext):
    await state.update_data(q5_answer4=message.text)
    data = await state.get_data()
    await state.clear()

    test_data = {
        'name': data['name_quest'],
        'questions': [
            {
                'question': data['question1'],
                'answers': [
                    data['q1_answer1'],
                    data['q1_answer2'],
                    data['q1_answer3'],
                    data['q1_answer4']
                ]
            },
            {
                'question': data.get('question2'),
                'answers': [
                    data.get('q2_answer1', ''),
                    data.get('q2_answer2', ''),
                    data.get('q2_answer3', ''),
                    data.get('q2_answer4', '')
                ]
            },
            {
                'question': data.get('question3'),
                'answers': [
                    data.get('q3_answer1', ''),
                    data.get('q3_answer2', ''),
                    data.get('q3_answer3', ''),
                    data.get('q3_answer4', '')
                ]
            },
            {
                'question': data.get('question4'),
                'answers': [
                    data.get('q4_answer1', ''),
                    data.get('q4_answer2', ''),
                    data.get('q4_answer3', ''),
                    data.get('q4_answer4', '')
                ]
            },
            {
                'question': data.get('question5'),
                'answers': [
                    data.get('q5_answer1', ''),
                    data.get('q5_answer2', ''),
                    data.get('q5_answer3', ''),
                    data.get('q5_answer4', '')
                ]
            }
        ]
    }

    save_test(test_data)

    formatted_text = []
    for question_index, question in enumerate(test_data['questions'], start=1):
        formatted_text.append(f'*–í–æ–ø—Ä–æ—Å {question_index}*: `{question["question"]}`')
        formatted_text.append(f'*–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞*:')
        for answer in question['answers']:
            formatted_text.append(f'- `{answer}`')
        formatted_text.append('')

    await message.answer(
        f'–°–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç:\n\n{"\n".join(formatted_text)}',
        reply_markup=kb.teacher_panel(),
        parse_mode=ParseMode.MARKDOWN
    )


def save_test(test_data):
    cur_tests.execute("INSERT INTO tests (name, questions, created_at) VALUES (?, ?, ?)",
                      (test_data['name'],
                       json.dumps(test_data['questions']),
                       datetime.now().strftime('%Y-%m-%d %H:%M:%S')))
    conn_tests.commit()


@teach.message(F.text == '–°–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤ üìñ')
async def text_show_tests(message: Message):
    cur_tests.execute("SELECT id, name, created_at FROM tests")
    tests = cur_tests.fetchall()
    if not tests:
        await message.answer('–ù–∏ –æ–¥–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ –Ω–µ –±—ã–ª–æ –Ω–∞–π–¥–µ–Ω–æ')
        return
    keyboard_tests = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{name} ({created_at})", callback_data=f"show_test_{test_id}")]
        for test_id, name, created_at in tests
    ])
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å:", reply_markup=keyboard_tests)


@teach.callback_query(F.data.startswith("show_test_"))
async def show_selected_test(callback_query: CallbackQuery):
    test_id = int(callback_query.data.split("_")[-1])

    cur_tests.execute("SELECT name, questions FROM tests WHERE id = ?", (test_id,))
    name, questions_json = cur_tests.fetchone()
    questions = json.loads(questions_json)

    formatted_test = []
    for question in questions:
        formatted_test.append(f"*–í–æ–ø—Ä–æ—Å*: {question['question']}")
        formatted_test.append("*–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞*:")
        for answer in question['answers']:
            formatted_test.append(f"- `{answer}`")
        formatted_test.append("")

    await callback_query.message.edit_text(
        f"–¢–µ—Å—Ç: *{name}*\n\n{'\n'.join(formatted_test)}",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç —Å—Ç—É–¥–µ–Ω—Ç–∞–º", callback_data=f"send_test_{test_id}")],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="back")]
        ]),
        parse_mode=ParseMode.MARKDOWN
    )


@teach.callback_query(F.data.startswith("send_test_"))
async def send_test_to_students(callback_query: CallbackQuery):
    test_id = int(callback_query.data.split("_")[-1])

    cur_tests.execute("SELECT name, questions FROM tests WHERE id = ?", (test_id,))
    test_name, questions_json = cur_tests.fetchone()

    cur_users.execute("SELECT user_id FROM users WHERE user_type = 'student'")
    student_ids = [row[0] for row in cur_users.fetchall()]

    for student_id in student_ids:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text='–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç', callback_data=f"start_test_{test_id}")]
        ])

        await bot.send_message(
            student_id,
            f"–í–∞–º –ø—Ä–∏—à–µ–ª —Ç–µ—Å—Ç –Ω–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ '{test_name}'. –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
            reply_markup=keyboard
        )

    await callback_query.message.edit_text("–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å—Ç—É–¥–µ–Ω—Ç–∞–º.")


@teach.callback_query(F.data == "back")
async def back_to_tests_list(callback_query: CallbackQuery):
    cur_tests.execute("SELECT id, name, created_at FROM tests")
    tests = cur_tests.fetchall()

    keyboard_tests = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{name} ({created_at})", callback_data=f"show_test_{test_id}")]
        for test_id, name, created_at in tests
    ])

    await callback_query.message.edit_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç, —á—Ç–æ–±—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å:",
        reply_markup=keyboard_tests
    )


@teach.message(F.text == '–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã ‚úÖ')
async def show_test_results(message: Message):
    cur_tests.execute("SELECT name FROM tests")
    test_names = [row[0] for row in cur_tests.fetchall()]

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=test_name, callback_data=f"show_results_{test_name}")]
        for test_name in test_names
    ])

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:", reply_markup=keyboard)


@teach.callback_query(lambda c: c.data.startswith("show_results_"))
async def show_selected_test_results(callback_query: CallbackQuery):
    test_name = callback_query.data.split("_")[-1]

    cur_results.execute("""
        SELECT full_name, answer_text, created_at 
        FROM results
        WHERE test_name = ?
    """, (test_name,))
    results = cur_results.fetchall()

    if results:
        formatted_results = f"–¢–µ—Å—Ç: {test_name}\n\n"
        current_student = None
        for row in results:
            student_name = row[0]
            if student_name != current_student:
                if current_student is not None:
                    formatted_results += "\n"
                formatted_results += f"–°—Ç—É–¥–µ–Ω—Ç: {student_name}\n"
                current_student = student_name
            if row[1]:
                formatted_results += f"‚ûñ *{row[1]}*\n"
            else:
                formatted_results += f"‚ûñ *–û—Ç–≤–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç*\n"
            formatted_results += f"  _–î–∞—Ç–∞: {row[2]}_ ‚è≥\n"
    else:
        formatted_results = f"–î–ª—è —Ç–µ—Å—Ç–∞ '{test_name}' –Ω–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."

    await callback_query.message.answer(formatted_results.strip(), parse_mode=ParseMode.MARKDOWN)
    await callback_query.answer('')


@teach.message(F.text == "–°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º ‚òéÔ∏è")
async def text_call_admin(message: Message, state: FSMContext):
    await state.set_state(AdminCall.wait_to_message)
    await state.update_data(user_name=message.from_user.full_name)
    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É')


@teach.message(AdminCall.wait_to_message)
async def send_message_to_admin(message: Message, state: FSMContext):
    data = await state.get_data()
    user_name = data.get('user_name')
    admin_chat_id = ADMIN_ID
    await bot.send_message(chat_id=admin_chat_id, text=f"*–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_name}:*\n\n{message.text}",
                           parse_mode=ParseMode.MARKDOWN)
    await message.answer("–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.")
    await state.clear()
