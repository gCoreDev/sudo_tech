import requests
from aiogram import F, Router, Bot
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.enums.parse_mode import ParseMode
import handlers.keyboards as kb
from handlers.create_data_base import (cur_users, conn_users)
from config import bot

admin = Router()


@admin.message(F.text == '–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç üë§')
async def per_acc_adm(message: Message):
    user_id = message.from_user.id
    user_full_name = message.from_user.full_name
    user_username = message.from_user.username
    cur_users.execute('SELECT user_type FROM users WHERE user_id=?', (user_id,))
    user = cur_users.fetchone()
    if user:
        user_type = user[0]
        if user_type == 'admin':
            await message.answer('–í—ã –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏',
                                 reply_markup=kb.admin_panel())
        elif user_type == 'student':
            await message.answer(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å,'
                                 f' {message.from_user.full_name}, —Å—Ç—É–¥–µ–Ω—Ç!',
                                 reply_markup=kb.std_panel())
        elif user_type == 'teacher':
            await message.answer(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å,'
                                 f' <b>{message.from_user.full_name}!</b>',
                                 parse_mode=ParseMode('HTML'),
                                 reply_markup=kb.teacher_panel())
        else:
            await message.answer('‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ª–∏—á–Ω–æ–º—É –∫–∞–±–∏–Ω–µ—Ç—É! –ï—Å–ª–∏ –≤—ã —Å—Ç—É–¥–µ–Ω—Ç –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∫–æ–ª–ª–µ–¥–∂–∞,'
                                 '–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Å–≤–æ–µ–º—É –∫—É—Ä–∞—Ç–æ—Ä—É')


@admin.message(Command('users'))
async def cmd_users(message: Message):
    cur_users.execute('SELECT * FROM users')
    users = cur_users.fetchall()
    user_list = '–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n'
    for user in users:
        user_list += ' | '.join(f'`{col}`' for col in user) + "\n"
    await message.answer(user_list, parse_mode=ParseMode.MARKDOWN)


async def is_admin(user_id):
    cur_users.execute("SELECT user_type FROM users WHERE user_id = ?", (user_id,))
    result = cur_users.fetchone()
    if result and result[0] == 'admin':
        return True
    else:
        return False


@admin.message(Command('edit'))
async def cmd_edit(message: Message):
    if await is_admin(message.from_user.id):
        # –†–∞–∑–±–∏—Ä–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        args = message.text.split()[1:]
        if len(args) == 2:
            try:
                user_id = int(args[0])
            except ValueError:
                await message.reply("‚ÄºÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º.")
                return

            new_user_type = args[1]

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø—ã—Ç–∞–µ—Ç—Å—è –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π —Ç–∏–ø
            if user_id == message.from_user.id:
                await message.reply("‚ÄºÔ∏è–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Å–≤–æ–π —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            cur_users.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
            if not cur_users.fetchone():
                await message.reply(f"‚ÄºÔ∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
                return

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            cur_users.execute("UPDATE users SET user_type = ? WHERE user_id = ?", (new_user_type, user_id))
            conn_users.commit()

            valid_user_types = ['guest', 'student', 'teacher', 'admin']
            if new_user_type not in valid_user_types:
                await message.reply("‚ÄºÔ∏è–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: guest, student, teacher, admin")
                return

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏
            await message.reply(f"‚úÖ –¢–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å ID {user_id} –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ {new_user_type}.")
        else:
            await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /edit_user <user_id> <user_type>")
    else:
        await message.reply("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã ")


@admin.message(Command('del'))
async def cmd_del(message: Message):
    user_id = message.from_user.id
    cur_users.execute("SELECT user_type FROM users WHERE user_id=?", (user_id,))
    user = cur_users.fetchone()
    if not user or user[0] != 'admin':
        await message.answer("‚ö†Ô∏è –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã!")
        return

    args = message.text.split()[1:]  # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã, –∏—Å–∫–ª—é—á–∞—è —Å–∞–º—É –∫–æ–º–∞–Ω–¥—É
    if len(args) != 1:
        await message.answer("‚ÄºÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /del_user (id)")
        return

    del_user_id = int(args[0])

    if del_user_id == user_id:
        await message.answer("‚ÄºÔ∏è–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π ID.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º del_user_id
    cur_users.execute("SELECT 1 FROM users WHERE user_id=?", (del_user_id,))
    existing_user = cur_users.fetchone()
    if not existing_user:
        await message.answer(f"‚ÄºÔ∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {del_user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        return

    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    cur_users.execute("DELETE FROM users WHERE user_id=?", (del_user_id,))
    conn_users.commit()
    await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {del_user_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")


@admin.message(F.text == '–ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π üë§')
async def cmd_text_users(message: Message):
    await cmd_users(message)


@admin.message(F.text == '–ò–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚úèÔ∏è')
async def cmd_text_edit(message: Message):
    await message.reply('–ß—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Ç–∏–ø —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É \n'
                        '/edit (id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è) (—Ç–∏–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)')


@admin.message(F.text == '–£–¥–∞–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ‚úñÔ∏è')
async def cmd_text_del(message: Message):
    await message.reply('–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–µ–¥—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É \n'
                        '/del (id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)')


class SendMessage(StatesGroup):
    awaiting_message = State()


def get_all_user_ids():
    cur_users.execute("SELECT user_id FROM users")
    user_ids = [row[0] for row in cur_users.fetchall()]
    return user_ids


async def send_message_to_all(message: Message):
    user_ids = get_all_user_ids()
    for user_id in user_ids:
        await bot.send_message(user_id, f'<b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∞</b>\n{message.text}', parse_mode=ParseMode.HTML)


@admin.message(F.text == '–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É üì¢')
async def send_message(message: Message, state: FSMContext):
    if await is_admin(message.from_user.id):
        await state.update_data(awaiting_message=message.text)
        await state.set_state(SendMessage.awaiting_message)
        await message.reply('–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
    else:
        await message.answer('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!')


@admin.message(SendMessage.awaiting_message)
async def text_send_message(message: Message, state: FSMContext):
    if message.text.startswith('–°–¥–µ–ª–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É üì¢'):
        return
    await send_message_to_all(message)
    await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
    await state.clear()


@admin.message(F.text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ üóì')
async def week_plan(message: Message):
    await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–¥ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º', reply_markup=kb.week_plan)


@admin.callback_query(F.data == 'upload_week_plan')
async def data_upload_week_plan(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.answer('–ß—Ç–æ–±—ã –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .xlxs')


@admin.callback_query(F.data == 'check_week_plan')
async def data_check_week_plan(callback: CallbackQuery):
    await callback.answer('')
    schedule = dict(–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫=[
        '1) –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ - –ù–∏–∫–æ–ª–∞–π –ò.–ù. 301 –∫–∞–±',
        '2) –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ - –ò–≤–∞–Ω–æ–≤–∞ –ê.–ú. 105 –∫–∞–±.',
        '3) –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ - –õ–µ–±–µ–¥–µ–≤ –ù.–û. 224 –∫–∞–±.',
        '4) –§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞ - –ï–ª–∏—Å–µ–µ–≤ –ê.–ü. 111 –∫–∞–±.'
    ], –í—Ç–æ—Ä–Ω–∏–∫=[
        '1) –ò—Å—Ç–æ—Ä–∏—è - –ü–µ—Ç—Ä–æ–≤ –°.–í. 201 –∫–∞–±.',
        '2) –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ - –°–∏–¥–æ—Ä–æ–≤–∞ –¢.–Æ. 105 –∫–∞–±.',
        '3) –§–∏–∑–∏–∫–∞ - –°–º–∏—Ä–Ω–æ–≤ –ê.–ò. 302 –∫–∞–±.',
        '4) –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ - –ö—É–∑–Ω–µ—Ü–æ–≤–∞ –ú.–ù. 107 –∫–∞–±.'
    ], –°—Ä–µ–¥–∞=[
        '1) –•–∏–º–∏—è - –ò–≤–∞–Ω–æ–≤ –ü.–ü. 303 –∫–∞–±.',
        '2) –ë–∏–æ–ª–æ–≥–∏—è - –°–µ—Ä–≥–µ–µ–≤–∞ –ï.–î. 304 –∫–∞–±.',
        '3) –û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ - –°–æ–∫–æ–ª–æ–≤ –î.–í. 202 –∫–∞–±.',
        '4) –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è - –ü–µ—Ç—Ä–æ–≤–∞ –ê.–°. 106 –∫–∞–±.'
    ], –ß–µ—Ç–≤–µ—Ä–≥=[
        '1) –ê–ª–≥–µ–±—Ä–∞ - –ù–∏–∫–æ–ª–∞–π –ò.–ù. 301 –∫–∞–±.',
        '2) –ì–µ–æ–º–µ—Ç—Ä–∏—è - –ù–∏–∫–æ–ª–∞–π –ò.–ù. 301 –∫–∞–±.',
        '3) –§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞ - –ï–ª–∏—Å–µ–µ–≤ –ê.–ü. 111 –∫–∞–±.',
        '4) –û–ë–ñ - –°–º–∏—Ä–Ω–æ–≤ –ê.–ò. 302 –∫–∞–±.'
    ], –ü—è—Ç–Ω–∏—Ü–∞=[
        '1) –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ - –ò–≤–∞–Ω–æ–≤–∞ –ê.–ú. 105 –∫–∞–±.',
        '2) –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ - –°–∏–¥–æ—Ä–æ–≤–∞ –¢.–Æ. 105 –∫–∞–±.',
        '3) –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ - –õ–µ–±–µ–¥–µ–≤ –ù.–û. 224 –∫–∞–±.',
        '4) –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ - –ö—É–∑–Ω–µ—Ü–æ–≤–∞ –ú.–ù. 107 –∫–∞–±.'
    ])

    schedule_text = '<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:</b>\n\n'
    for day, lessons in schedule.items():
        schedule_text += f'<b>{day}:</b>\n'
        for lesson in lessons:
            schedule_text += f'- {lesson}\n'
        schedule_text += '\n'

    await callback.message.answer(schedule_text, parse_mode=ParseMode.HTML)


@admin.callback_query(F.data == 'del_week_plan')
async def data_del_week_plan(callback: CallbackQuery):
    await callback.answer('')
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /del week_plan')




