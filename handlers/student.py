import json
from datetime import datetime
from config import bot
from aiogram.enums.parse_mode import ParseMode
from aiogram import F, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
import handlers.keyboards as kb
from .states import TeacherContact
from handlers.create_data_base import (cur_tests, cur_messages, cur_results, cur_users,
                                       conn_tests, conn_messages, conn_results, conn_users)

std = Router()


@std.message(F.text == '–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ—Å—Ç—ã üßë‚Äçüíª')
async def show_test(message: Message):
    await message.answer("*–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏.*", parse_mode=ParseMode.MARKDOWN)

    cur_tests.execute("SELECT id, name FROM tests")
    tests = cur_tests.fetchall()

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=test_name, callback_data=f"start_test_{test_id}")]
        for test_id, test_name in tests
    ])
    await message.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–µ—Å—Ç—ã:", reply_markup=keyboard)


@std.callback_query(lambda c: c.data.startswith("start_test_"))
async def start_test(callback_query: CallbackQuery, state: FSMContext):
    test_id = int(callback_query.data.split("_")[-1])

    cur_results.execute("SELECT COUNT(*) FROM results WHERE test_id = ? AND full_name = ?",
                        (test_id, callback_query.from_user.full_name))
    count = cur_results.fetchone()[0]

    if count > 0:
        cur_results.execute("""
            SELECT answer_text, created_at 
            FROM results
            WHERE test_id = ? AND full_name = ?
            ORDER BY id
        """, (test_id, callback_query.from_user.full_name))
        results = cur_results.fetchall()

        formatted_result = f"–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —ç—Ç–æ—Ç —Ç–µ—Å—Ç:\n\n"
        for answer_text, created_at in results:
            formatted_result += f"‚ûñ *{answer_text}*\n"
            formatted_result += f"  _–î–∞—Ç–∞: {created_at}_ ‚è≥\n\n"
        await callback_query.message.answer(formatted_result.strip(), parse_mode=ParseMode.MARKDOWN)
    else:
        cur_tests.execute("SELECT name, questions FROM tests WHERE id = ?", (test_id,))
        test_name, questions_json = cur_tests.fetchone()
        questions = json.loads(questions_json)

        await state.update_data(test_id=test_id, test_name=test_name, questions=questions, current_question=0)

        await show_question(callback_query.message, state)

    await callback_query.answer('')


async def show_question(message: Message, state: FSMContext):
    data = await state.get_data()
    test_id = data['test_id']
    test_name = data['test_name']
    questions = data['questions']
    current_question = data['current_question']

    if current_question < len(questions):
        question = questions[current_question]
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text=answer, callback_data=f"answer_{test_id}_{current_question}_{i}")]
            for i, answer in enumerate(question['answers'])
        ])

        msg = await message.answer(
            f"*–¢–µ—Å—Ç: {test_name}*\n\n*–í–æ–ø—Ä–æ—Å {current_question + 1}:* *{question['question']}*\n\n–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:",
            reply_markup=keyboard,
            parse_mode=ParseMode.MARKDOWN
        )
        await state.update_data(question_message_id=msg.message_id)
    else:
        question_message_id = (await state.get_data()).get('question_message_id')
        if question_message_id:
            await bot.delete_message(chat_id=message.chat.id, message_id=question_message_id)

        await state.clear()
        await message.answer("*–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞!*\n"
                             "–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ã–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é.",
                             parse_mode=ParseMode.MARKDOWN)


@std.callback_query(lambda c: c.data.startswith("answer_"))
async def process_student_answer(callback_query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    if 'test_id' in data:
        test_id = data['test_id']
        test_name = data['test_name']
        questions = data['questions']
        current_question = data['current_question']
        selected_answer_index = int(callback_query.data.split("_")[-1])
        selected_answer_text = questions[current_question]['answers'][selected_answer_index]

        cur_results.execute("INSERT INTO results (test_id, test_name, full_name, answer, answer_text, created_at)"
                            " VALUES (?, ?, ?, ?, ?, ?)",
                            (test_id, test_name, callback_query.from_user.full_name, selected_answer_index + 1,
                             selected_answer_text,
                             datetime.now().strftime('%Y-%m-%d %H:%M:%S')))
        conn_results.commit()

        if current_question < len(questions) - 1:
            await state.update_data(current_question=current_question + 1)
            question = questions[current_question + 1]
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text=answer, callback_data=f"answer_{test_id}_{current_question + 1}_{i}")]
                for i, answer in enumerate(question['answers'])
            ])

            await callback_query.message.edit_text(
                f"*–¢–µ—Å—Ç: {test_name}*\n\n*–í–æ–ø—Ä–æ—Å {current_question + 2}:* *{question['question']}*\n\n–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:",
                reply_markup=keyboard,
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await state.clear()
            await callback_query.message.edit_text("*–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–∫–æ–Ω—á–∏–ª–∏ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞!*\n"
                                                   "–í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—ã–ª–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é.",
                                                   parse_mode=ParseMode.MARKDOWN)
    else:
        await callback_query.answer("–û—à–∏–±–∫–∞: –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")


@std.message(F.text == '–°–≤—è–∑—å —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º ‚òéÔ∏è')
async def teacher_contact(message: Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
    cur_users.execute("SELECT user_id, user_full_name FROM users WHERE user_type = 'teacher'")
    teachers = cur_users.fetchall()

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=f"{full_name}", callback_data=f"send_to_teacher_{user_id}")]
        for user_id, full_name in teachers
    ])

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞:", reply_markup=keyboard)
    await state.set_state(TeacherContact.waiting_for_teacher)


@std.callback_query(lambda c: c.data.startswith("send_to_teacher_"))
async def send_to_teacher(callback_query: CallbackQuery, state: FSMContext):
    teacher_id = int(callback_query.data.split("_")[-1])
    await state.update_data(teacher_id=teacher_id)
    await state.set_state(TeacherContact.waiting_for_message)
    await callback_query.message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é")
    await callback_query.answer()


@std.message(TeacherContact.waiting_for_message)
async def send_message_to_teacher(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–∞ –≤ —Ç–∞–±–ª–∏—Ü—É messages
    data = await state.get_data()
    teacher_id = data.get('teacher_id')
    cur_messages.execute("INSERT INTO messages (user_id, user_type, message) VALUES (?, ?, ?)",
                         (message.from_user.id, 'student', message.text))
    conn_messages.commit()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é
    await send_message_to_teacher(message, teacher_id, '—Å—Ç—É–¥–µ–Ω—Ç')
    await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –ñ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç–∞.")

    await state.clear()


async def send_message_to_teacher(message: Message, user_id: int, user_type: str):
    await bot.send_message(user_id, f'*–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_type},'
                                    f' {message.from_user.full_name}\n\n*'
                                    f' {message.text}',
                           reply_markup=kb.answer,
                           parse_mode=ParseMode.MARKDOWN)


@std.message(F.text == '–£—á–µ–±–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã üìö')
async def cmd_docs(message: Message):
    await message.answer('–£—á–µ–±–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ —à–∞–±–ª–æ–Ω—ã', reply_markup=kb.docs_panel)


@std.message(F.text == '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –ø–∞—Ä üóì')
async def show_schedule(message: Message):
    schedule = {
        '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': [
            '1) –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ - –ù–∏–∫–æ–ª–∞–π –ò.–ù. 301 –∫–∞–±',
            '2) –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ - –ò–≤–∞–Ω–æ–≤–∞ –ê.–ú. 105 –∫–∞–±.',
            '3) –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ - –õ–µ–±–µ–¥–µ–≤ –ù.–û. 224 –∫–∞–±.',
            '4) –§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞ - –ï–ª–∏—Å–µ–µ–≤ –ê.–ü. 111 –∫–∞–±.'
        ],
        '–í—Ç–æ—Ä–Ω–∏–∫': [
            '1) –ò—Å—Ç–æ—Ä–∏—è - –ü–µ—Ç—Ä–æ–≤ –°.–í. 201 –∫–∞–±.',
            '2) –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ - –°–∏–¥–æ—Ä–æ–≤–∞ –¢.–Æ. 105 –∫–∞–±.',
            '3) –§–∏–∑–∏–∫–∞ - –°–º–∏—Ä–Ω–æ–≤ –ê.–ò. 302 –∫–∞–±.',
            '4) –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ - –ö—É–∑–Ω–µ—Ü–æ–≤–∞ –ú.–ù. 107 –∫–∞–±.'
        ],
        '–°—Ä–µ–¥–∞': [
            '1) –•–∏–º–∏—è - –ò–≤–∞–Ω–æ–≤ –ü.–ü. 303 –∫–∞–±.',
            '2) –ë–∏–æ–ª–æ–≥–∏—è - –°–µ—Ä–≥–µ–µ–≤–∞ –ï.–î. 304 –∫–∞–±.',
            '3) –û–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ - –°–æ–∫–æ–ª–æ–≤ –î.–í. 202 –∫–∞–±.',
            '4) –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—è - –ü–µ—Ç—Ä–æ–≤–∞ –ê.–°. 106 –∫–∞–±.'
        ],
        '–ß–µ—Ç–≤–µ—Ä–≥': [
            '1) –ê–ª–≥–µ–±—Ä–∞ - –ù–∏–∫–æ–ª–∞–π –ò.–ù. 301 –∫–∞–±.',
            '2) –ì–µ–æ–º–µ—Ç—Ä–∏—è - –ù–∏–∫–æ–ª–∞–π –ò.–ù. 301 –∫–∞–±.',
            '3) –§–∏–∑–∫—É–ª—å—Ç—É—Ä–∞ - –ï–ª–∏—Å–µ–µ–≤ –ê.–ü. 111 –∫–∞–±.',
            '4) –û–ë–ñ - –°–º–∏—Ä–Ω–æ–≤ –ê.–ò. 302 –∫–∞–±.'
        ],
        '–ü—è—Ç–Ω–∏—Ü–∞': [
            '1) –†—É—Å—Å–∫–∏–π —è–∑—ã–∫ - –ò–≤–∞–Ω–æ–≤–∞ –ê.–ú. 105 –∫–∞–±.',
            '2) –õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ - –°–∏–¥–æ—Ä–æ–≤–∞ –¢.–Æ. 105 –∫–∞–±.',
            '3) –ò–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞ - –õ–µ–±–µ–¥–µ–≤ –ù.–û. 224 –∫–∞–±.',
            '4) –ê–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ - –ö—É–∑–Ω–µ—Ü–æ–≤–∞ –ú.–ù. 107 –∫–∞–±.'
        ]
    }

    schedule_text = '<b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é:</b>\n\n'
    for day, lessons in schedule.items():
        schedule_text += f'<b>{day}:</b>\n'
        for lesson in lessons:
            schedule_text += f'- {lesson}\n'
        schedule_text += '\n'

    await message.answer(schedule_text, parse_mode=ParseMode.HTML)


@std.message(F.text == '–ú–µ–Ω—é —Å—Ç–æ–ª–æ–≤–æ–π üç´')
async def text_menu(message: Message):
    menu = {
        '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫': [
            '1) –ë–æ—Ä—â —Å–æ —Å–º–µ—Ç–∞–Ω–æ–π üçú - 250 –∫–∫–∞–ª',
            '2) –ú–∞–∫–∞—Ä–æ–Ω—ã —Å –∫—É—Ä–∏–Ω–æ–π –∫–æ—Ç–ª–µ—Ç–æ–π üçù - 450 –∫–∫–∞–ª',
            '3) –ö–æ–º–ø–æ—Ç üßÉ - 100 –∫–∫–∞–ª'
        ],
        '–í—Ç–æ—Ä–Ω–∏–∫': [
            '1) –ì—Ä–µ—á–Ω–µ–≤–∞—è –∫–∞—à–∞ —Å —Ç—É—à–µ–Ω–æ–π –≥–æ–≤—è–¥–∏–Ω–æ–π üç≤ - 380 –∫–∫–∞–ª',
            '2) –†—ã–±–∞ –≤ –∫–ª—è—Ä–µ —Å –æ–≤–æ—â–∞–º–∏ üêü - 320 –∫–∫–∞–ª',
            '3) –ö–∏—Å–µ–ª—å üçπ - 80 –∫–∫–∞–ª'
        ],
        '–°—Ä–µ–¥–∞': [
            '1) –°—É–ø-–ª–∞–ø—à–∞ —Å –∫—É—Ä–∏—Ü–µ–π üçú - 220 –∫–∫–∞–ª',
            '2) –ö–∞—Ä—Ç–æ—Ñ–µ–ª—å–Ω–æ–µ –ø—é—Ä–µ —Å –æ—Ç–±–∏–≤–Ω–æ–π üçΩÔ∏è - 400 –∫–∫–∞–ª',
            '3) –ú–æ—Ä—Å üßÉ - 90 –∫–∫–∞–ª'
        ],
        '–ß–µ—Ç–≤–µ—Ä–≥': [
            '1) –©–∏ –∏–∑ —Å–≤–µ–∂–µ–π –∫–∞–ø—É—Å—Ç—ã üçú - 180 –∫–∫–∞–ª',
            '2) –†–∏—Å —Å —Ç—É—à–µ–Ω–æ–π —Ä—ã–±–æ–π üç≤ - 350 –∫–∫–∞–ª',
            '3) –ö–∏—Å–µ–ª—å üçπ - 80 –∫–∫–∞–ª'
        ],
        '–ü—è—Ç–Ω–∏—Ü–∞': [
            '1) –ì—Ä–∏–±–Ω–æ–π —Å—É–ø üçú - 200 –∫–∫–∞–ª',
            '2) –ü–µ–ª—å–º–µ–Ω–∏ —Å –æ–≤–æ—â–Ω—ã–º —Å–∞–ª–∞—Ç–æ–º ü•ü - 420 –∫–∫–∞–ª',
            '3) –ö–æ–º–ø–æ—Ç üßÉ - 100 –∫–∫–∞–ª'
        ]
    }

    menu_text = '<b>–ú–µ–Ω—é –Ω–∞ –Ω–µ–¥–µ–ª—é:</b>\n\n'
    for day, dishes in menu.items():
        menu_text += f'<b>{day}:</b>\n'
        for dish in dishes:
            menu_text += f'- {dish}\n'
        menu_text += '\n'

    await message.answer(menu_text, parse_mode=ParseMode.HTML)
