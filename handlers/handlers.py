import asyncio

import requests
from aiogram import F, Router, Bot
from aiogram.filters import CommandStart, Command
from aiogram.types import Message
from aiogram.enums import ChatAction
from apscheduler.schedulers.asyncio import AsyncIOScheduler

import handlers.keyboards as kb
import openpyxl
from config import DATA_DIR, WEATHER, bot
from handlers.create_data_base import conn_users, cur_users

hand = Router()


@hand.message(CommandStart())
async def cmd_start(message: Message):
    await message.bot.send_chat_action(chat_id=message.from_user.id,
                                       action=ChatAction.TYPING)
    await asyncio.sleep(1)
    await message.answer_photo(photo='https://lh3.googleusercontent.com/'
                               'p/AF1QipM8MkG4sv0a2Fk-hQYESG-H3A5rmjC9Y68GLEhi=w600-k')
    user_id = message.from_user.id
    user_full_name = message.from_user.full_name
    user_username = message.from_user.username

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    cur_users.execute("SELECT * FROM users WHERE user_id = ?",
                      (user_id,))
    if cur_users.fetchone() is None:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        cur_users.execute('INSERT INTO users (user_id, user_full_name, user_username, user_type)'
                          'VALUES (?, ?, ?, ?)',
                          (user_id, user_full_name, user_username, 'student'))
        conn_users.commit()
        await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≥–æ—Å—Ç—å –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é', reply_markup=kb.main)
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—Ö–æ–¥–µ
        # await message.answer(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å {user_type} –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é', reply_markup=kb.main)
        user_id = message.from_user.id
        cur_users.execute('SELECT user_type FROM users WHERE user_id=?',
                          (user_id,))
        user = cur_users.fetchone()
        if user:
            user_type = user[0]
            if user_type == 'admin':
                await message.answer(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {message.from_user.full_name},'
                                     f' –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é', reply_markup=kb.main)
            elif user_type == 'student':
                await message.answer(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —Å—Ç—É–¥–µ–Ω—Ç {message.from_user.full_name},'
                                     f' –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é', reply_markup=kb.main)
            elif user_type == 'teacher':
                await message.answer(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å {message.from_user.full_name},'
                                     f' –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é', reply_markup=kb.main)
            else:
                await message.answer(f'–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –≥–æ—Å—Ç—å, {message.from_user.full_name}'
                                     f' –í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é', reply_markup=kb.main)


@hand.message(Command('check_list'))
async def cmd_table(message: Message):
    book = openpyxl.open(DATA_DIR / "docs/data.xlsx", read_only=True)
    sheet = book.active

    output = ""

    for row in sheet.iter_rows(min_row=1, values_only=True):
        row_values = []
        for cell in row:
            if cell is not None and cell != "":
                row_values.append(str(cell))
        if row_values:
            output += "| " + " | ".join(row_values) + " |\n"

    if output:
        parts = [output[i:i + 2000] for i in range(0, len(output), 2000)]  # —Ä–∞–∑–±–∏–≤–∞–µ–º —Å—Ç—Ä–æ–∫—É
        # –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ
        # 2000 —Å–∏–º–≤–æ–ª–æ–≤
        for part in parts:
            await message.answer("```\n" + part + "```")  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —á–∞—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
    else:
        await message.answer("–¢–∞–±–ª–∏—Ü–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö —è—á–µ–µ–∫.")


@hand.message(F.text == '–ù–∞–∑–∞–¥ üîô')
async def cmd_start_back(message: Message):
    await cmd_start(message)


@hand.message(F.text == '–£–∑–Ω–∞—Ç—å –æ –±–æ—Ç–µ üìñ')
async def cmd_about(message: Message):
    await message.bot.send_chat_action(chat_id=message.from_user.id,
                                       action=ChatAction.TYPING)
    await asyncio.sleep(1)
    await message.reply(f'–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é, {message.from_user.full_name}, —è '
                        f'–≠–Ω–µ—Ä–≥–æ–ë–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –ø–æ–º–æ—â–∏ –º–µ–∂–¥—É —Å—Ç—É–¥–µ–Ω—Ç–∞–º–∏ –∏ '
                        f'–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è–º–∏. –Ø –µ—â–µ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ï—Å–ª–∏ –≤—ã '
                        f'—Å—Ç—É–¥–µ–Ω—Ç –∏–ª–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å, –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–π—Ç–∏ –≤ '
                        f'–ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç, –æ–¥–Ω–∞–∫–æ –µ—Å–ª–∏ –Ω–µ –≤—ã—Ö–æ–¥–∏—Ç, '
                        f'–æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –≤–∞—à–µ–º—É –∫—É—Ä–∞—Ç–æ—Ä—É.')


@hand.message(F.text == '–°–∞–π—Ç –∫–æ–ª–ª–µ–¥–∂–∞ üíª')
async def cmd_site(message: Message):
    await message.answer_photo(photo='https://lh3.googleusercontent.com'
                                     '/p/AF1QipM8MkG4sv0a2Fk-hQYESG-H3A'
                                     '5rmjC9Y68GLEhi=w600-k')
    await message.answer('–°–∞–π—Ç —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –∫–æ–ª–ª–µ–¥–∂–∞', reply_markup=kb.site)


@hand.message(F.text == '–ù–æ–≤–æ—Å—Ç–∏ –∫–æ–ª–ª–µ–¥–∂–∞ üì¢')
async def cmd_group(message: Message):
    await message.answer_photo(photo='https://proverili.ru/uploads/media/'
                                     '5236/1.jpg')
    await message.answer('–ö–∞–Ω–∞–ª –∫–æ–ª–ª–µ–¥–∂–∞', reply_markup=kb.group)


def get_current_weather(city):
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={WEATHER}&units=metric"
    response = requests.get(url)
    return response.json()


async def send_daily_weather(bot: Bot):
    city = "Vladivostok"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π –≥–æ—Ä–æ–¥

    weather_data = get_current_weather(city)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–≥–æ–¥–µ
    weather_message = f"–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –ø–æ–≥–æ–¥–∞ –≤ {city}:\n" \
                      f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather_data['main']['temp']}¬∞C\n" \
                      f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather_data['main']['humidity']}%\n" \
                      f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {weather_data['wind']['speed']} –º/—Å"

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –±–æ—Ç–∞
    user_ids = await get_all_user_ids()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    for user_id in user_ids:
        await bot.send_message(chat_id=user_id, text=weather_message)


async def get_all_user_ids():
    cur_users.execute("SELECT user_id FROM users")
    user_ids = [row[0] for row in cur_users.fetchall()]
    return user_ids


@hand.message(F.text == '–ü–æ–≥–æ–¥–∞ üå§')
async def text_weather(message: Message):
    city = "Vladivostok"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π –≥–æ—Ä–æ–¥

    try:
        weather_data = get_current_weather(city)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–æ–≥–æ–¥–µ
        weather_message = f"–¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ –≤ {city}:\n" \
                          f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather_data['main']['temp']}¬∞C\n" \
                          f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {weather_data['main']['humidity']}%\n" \
                          f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {weather_data['wind']['speed']} –º/—Å"

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(weather_message)

    except Exception as e:
        await message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


scheduler = AsyncIOScheduler()
scheduler.add_job(send_daily_weather, "cron", hour=8, minute=0, args=[bot])
scheduler.start()
